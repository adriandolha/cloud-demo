apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: lorem-ipsum-local-env-ws
  namespace: tekton-pipelines
spec:
  resources:
    requests:
      storage: 500Mi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: lorem-ipsum-local-env
  namespace: tekton-pipelines
spec:
  workspaces:
    - name: source
    - name: argocd
    - name: terraform
    - name: secrets
    - name: kube-config
  params:
    - name: image-url
      type: string
      description: Docker registry image url.
    - name: repo-url
      type: string
      description: The git repository URL to clone from.
    - name: branch-name
      type: string
      description: The git depth to clone.
    - name: argocd-repo-url
      type: string
      description: The git repository URL to clone from.
    - name: argocd-branch-name
      type: string
      description: The git depth to clone.
    - name: depth
      type: string
      description: The clone depth.
      default: "0"
    - name: tf-path
      type: string
      description: Path for terraform files.
      default: ""
    - name: run-tests
      type: string
      description: The app to deploy.
      default: "yes"
  tasks:
    - name: clean-source
      taskRef:
        name: clean
      workspaces:
        - name: source
          workspace: source
    - name: clean-argocd
      taskRef:
        name: clean
      runAfter:
        - clean-source
      workspaces:
        - name: source
          workspace: argocd
    - name: fetch-source-repo
      taskRef:
        name: git-clone
      runAfter:
        - clean-argocd
      workspaces:
        - name: output
          workspace: source
      params:
        - name: url
          value: $(params.repo-url)
        - name: revision
          value: $(params.branch-name)
        - name: depth
          value: $(params.depth)
    - name: fetch-argocd-repo
      taskRef:
        name: git-clone
      runAfter:
        - fetch-source-repo
      workspaces:
        - name: output
          workspace: argocd
      params:
        - name: url
          value: $(params.argocd-repo-url)
        - name: revision
          value: $(params.argocd-branch-name)
        - name: depth
          value: $(params.depth)
    - name: tf-apply-dev
      taskRef:
        name: terraform
      runAfter:
        - fetch-source-repo
      params:
        - name: namespace
          value: "dev"
        - name: path
          value: $(params.tf-path)
        - name: app-name
          value: "lorem-ipsum"
        - name: command
          value: "apply"
      workspaces:
        - name: source
          workspace: source
        - name: terraform
          workspace: terraform
        - name: secrets
          workspace: secrets
        - name: kube-config
          workspace: kube-config
    - name: app-version-dev
      taskRef:
        name: app-version
      runAfter:
        - tf-apply-dev
      params:
        - name: url
          value: $(params.repo-url)
        - name: imageUrl
          value: $(params.image-url)
        - name: imageTagPrefix
          value: "dev"

      workspaces:
        - name: source
          workspace: source
    - name: unit-test
      when:
        - input: "$(params.run-tests)"
          operator: in
          values: [ "yes" ]
      taskRef:
        name: pytest
      runAfter:
        - app-version-dev
      workspaces:
        - name: source
          workspace: source
      params:
        - name: ARGS
          value: tests
        - name: version
          value: "$(tasks.app-version-dev.results.version)"
        - name: WORKING_DIR
          value: $(workspaces.source.path)/lorem-ipsum-eks/lorem-ipsum
        - name: secret_name
          value: "lorem-ipsum-dev"

    - name: build-and-push
      taskRef:
        name: buildah
      runAfter:
        - unit-test
      params:
        - name: IMAGE
          value: "$(tasks.app-version-dev.results.imageUrl)"
        - name: CONTEXT
          value: $(workspaces.source.path)/lorem-ipsum-eks/lorem-ipsum
        - name: DOCKERFILE
          value: $(workspaces.source.path)/lorem-ipsum-eks/lorem-ipsum/Dockerfile
        - name: TLSVERIFY
          value: "false"
        - name: FORMAT
          value: "oci"
      workspaces:
        - name: source
          workspace: source
    - name: argocd-dev
      taskRef:
        name: argocd-push
      runAfter:
        - build-and-push
      workspaces:
        - name: source
          workspace: argocd
      params:
        - name: path
          value: $(workspaces.source.path)/lorem-ipsum/values.yaml
        - name: imageTag
          value: "$(tasks.app-version-dev.results.imageTag)"
        - name: revision
          value: "main"

    - name: argocd-sync-dev
      taskRef:
        name: argocd-task-sync-and-wait
      runAfter:
        - argocd-dev
      params:
        - name: application-name
          value: lorem-ipsum
        - name: argocd-version
          value: v1.4.0
        - name: revision
          value: "main"
    - name: integration-test
      taskRef:
        name: pytest
      runAfter:
        - argocd-sync-dev
      workspaces:
        - name: source
          workspace: source
      params:
        - name: ARGS
          value: integration_tests
        - name: version
          value: "$(tasks.app-version-dev.results.version)"
        - name: WORKING_DIR
          value: $(workspaces.source.path)/lorem-ipsum-eks/lorem-ipsum
        - name: secret_name
          value: "lorem-ipsum-dev"
    - name: app-version-test
      taskRef:
        name: app-version
      runAfter:
        - integration-test
      params:
        - name: url
          value: $(params.repo-url)
        - name: imageUrl
          value: $(params.image-url)
        - name: imageTagPrefix
          value: "test"
      workspaces:
        - name: source
          workspace: source
    - name: tf-apply-test
      taskRef:
        name: terraform
      runAfter:
        - app-version-test
      params:
        - name: namespace
          value: "test"
        - name: path
          value: $(params.tf-path)
        - name: app-name
          value: "lorem-ipsum"
        - name: command
          value: "apply"
      workspaces:
        - name: source
          workspace: source
        - name: terraform
          workspace: terraform
        - name: secrets
          workspace: secrets
        - name: kube-config
          workspace: kube-config

    - name: promote-image-to-test
      taskRef:
        name: docker-tag
      runAfter:
        - tf-apply-test
      workspaces:
        - name: source
          workspace: source
      params:
        - name: source-image
          value: "$(tasks.app-version-dev.results.imageUrl)"
        - name: target-image
          value: "$(tasks.app-version-test.results.imageUrl)"
    - name: clean-argocd-test
      taskRef:
        name: clean
      runAfter:
        - promote-image-to-test
      workspaces:
        - name: source
          workspace: argocd
    - name: fetch-argocd-repo-test
      taskRef:
        name: git-clone
      runAfter:
        - clean-argocd-test
      workspaces:
        - name: output
          workspace: argocd
      params:
        - name: url
          value: $(params.argocd-repo-url)
        - name: revision
          value: "test"
        - name: depth
          value: $(params.depth)
    - name: argocd-test
      taskRef:
        name: argocd-push
      runAfter:
        - fetch-argocd-repo-test
      workspaces:
        - name: source
          workspace: argocd
      params:
        - name: path
          value: $(workspaces.source.path)/lorem-ipsum/values.yaml
        - name: imageTag
          value: "$(tasks.app-version-test.results.imageTag)"
        - name: revision
          value: "test"
    - name: argocd-sync-test
      taskRef:
        name: argocd-task-sync-and-wait
      runAfter:
        - argocd-test
      params:
        - name: application-name
          value: lorem-ipsum-test
        - name: argocd-version
          value: v1.4.0
        - name: revision
          value: "test"


---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: lorem-ipsum-local-env
  namespace: tekton-pipelines
spec:
  serviceAccountName: git-push-service-account
  pipelineRef:
    name: lorem-ipsum-local-env
  params:
    - name: repo-url
      value: git@github.com:adriandolha/cloud-demo.git
    - name: branch-name
      value: master
    - name: argocd-repo-url
      value: git@github.com:adriandolha/lorem-ipsum-argocd.git
    - name: argocd-branch-name
      value: main
    - name: image-url
      value: "docker-registry:5000/lorem-ipsum"
    - name: run-tests
      value: "yes"
    - name: tf-path
      value: $(workspaces.source.path)/lorem-ipsum-eks/infrastructure/local/lorem-ipsum
  workspaces:
    - name: source
      persistentVolumeClaim:
        claimName: lorem-ipsum-local-env-ws
      subPath: source
    - name: argocd
      persistentVolumeClaim:
        claimName: lorem-ipsum-local-env-ws
      subPath: argocd
    - name: terraform
      persistentVolumeClaim:
        claimName: lorem-ipsum-local-env-ws
      subPath: terraform
    - name: secrets
      persistentVolumeClaim:
        claimName: lorem-ipsum-local-env-ws
    - name: kube-config
      secret:
        secretName: kubeconfig
