apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: lorem-ipsum-git
  namespace: tekton-pipelines
spec:
  type: git
  params:
    - name: revision
      value: master
    - name: url
      value: https://github.com/adriandolha/cloud-demo.git
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: lorem-ipsum
  namespace: tekton-pipelines
spec:
  type: image
  params:
    - name: url
      value: docker-registry.demo:5000/lorem-ipsum:dev
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pytest
  namespace: tekton-pipelines
spec:
  params:
    - name: PYTHON
      description: The used Python version, more precisely the tag for the Python image
      type: string
      default: "latest"
    - name: ARGS
      description: The additional arguments to be used with pytest
      type: string
      default: ""
    - name: SOURCE_PATH
      description: The path to the source code
      default: "."
    - name: WORKING_DIR
      description: The path to the source code
      default: "/workspace/source/lorem-ipsum-eks/lorem-ipsum"
    - name: REQUIREMENTS_FILE
      description: The name of the requirements file inside the source location
      default: "requirements.txt"
  resources:
    inputs:
      - name: source
        type: git
  steps:
    - name: unit-test
      image: docker.io/python:$(inputs.params.PYTHON)
      env:
        - name: aurora_host
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: aurora_host
        - name: aurora_user
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: aurora_user
        - name: aurora_port
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: aurora_port
        - name: aurora_password
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: aurora_password
        - name: admin_user
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: admin_user
        - name: admin_password
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: admin_password
        - name: password_encryption_key
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: password_encryption_key
        - name: jwk_public_key_path
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: jwk_public_key_path
        - name: admin_token_permissions
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: admin_token_permissions
        - name: user_token_permissions
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: user_token_permissions
        - name: admin_token
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: admin_token
        - name: user_token
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: user_token
      workingDir: $(inputs.params.WORKING_DIR)
      volumeMounts:
        - name: jwk-certs-auth0
          mountPath: /jwk/certs
      script: |
        export PATH=$PATH:$HOME/.local/bin
        if [ -n "$(inputs.params.REQUIREMENTS_FILE)" ] && [ -e "$(inputs.params.REQUIREMENTS_FILE)" ];then
          pip install -r $(inputs.params.SOURCE_PATH)/$(inputs.params.REQUIREMENTS_FILE)
          pip show pytest || {
            echo "###\nWarning: Pytest is missing in your requirements\n###";
            pip install pytest
          }
        else
          pip install pytest
        fi
        python -m pytest $(inputs.params.ARGS)
  volumes:
    - name: jwk-certs-auth0
      secret:
        secretName: jwk-certs-auth0
        items:
          - key: public.pem
            path: public.pem
          - key: key.pem
            path: private.pem

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-docker-image-from-git-source
  namespace: tekton-pipelines
spec:
  params:
    - name: pathToDockerFile
      type: string
      description: The path to the dockerfile to build
      default: $(resources.inputs.docker-source.path)/Dockerfile
    - name: pathToContext
      type: string
      description: |
        The build context used by Kaniko
        (https://github.com/GoogleContainerTools/kaniko#kaniko-build-contexts)
      default: $(resources.inputs.docker-source.path)
  resources:
    inputs:
      - name: docker-source
        type: git
    outputs:
      - name: builtImage
        type: image
  steps:
    - name: build-and-push
      image: gcr.io/kaniko-project/executor:v0.16.0
      # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(params.pathToDockerFile)
        - --destination=$(resources.outputs.builtImage.url)
        - --context=$(params.pathToContext)
        - --skip-tls-verify
    - name: debugging
      image: ubuntu  # contains bash
      script: |
        #!/usr/bin/env bash
        echo $(resources.outputs.builtImage.url)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-using-kubectl
  namespace: tekton-pipelines
spec:
  params:
    - name: path
      type: string
      description: Path to the manifest to apply
    - name: yamlPathToImage
      type: string
      description: |
        The path to the image to replace in the yaml manifest (arg to yq)
  resources:
    inputs:
      - name: source
        type: git
      - name: image
        type: image
  steps:
    - name: update-yaml
      image: alpine
      command: ["sed"]
      args:
        - "-i"
        - "-e"
        - "s;lorem-ipsum:dev; kubernetes.docker.internal:5000/lorem-ipsum:dev;g"
        - "$(params.path)"
    - name: debugging
      image: ubuntu  # contains bash
      script: |
        #!/usr/bin/env bash
        ls /workspace
        ls /workspace/source
        cat /workspace/source/lorem-ipsum-eks/lorem-ipsum/app.yaml
    - name: run-kubectl
      image: lachlanevenson/k8s-kubectl
      command: ["kubectl"]
      args:
        - "apply"
        - "-f"
        - "$(params.path)"
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: lorem-ipsum-pipeline
  namespace: tekton-pipelines
spec:
  resources:
    - name: source-repo
      type: git
    - name: web-image
      type: image
  tasks:
    - name: unit-test
      taskRef:
        name: pytest
      resources:
        inputs:
          - name: source
            resource: source-repo
      params:
        - name: ARGS
          value: tests
    - name: build-docker-image
      taskRef:
        name: build-docker-image-from-git-source
      runAfter:
        - unit-test
      params:
        - name: pathToDockerFile
          value: Dockerfile
        - name: pathToContext
          value: /workspace/docker-source/lorem-ipsum-eks/lorem-ipsum #configure: may change according to your source
      resources:
        inputs:
          - name: docker-source
            resource: source-repo
        outputs:
          - name: builtImage
            resource: web-image
    - name: deploy
      taskRef:
        name: deploy-using-kubectl
      runAfter:
        - build-docker-image
      resources:
        inputs:
          - name: source
            resource: source-repo
          - name: image
            resource: web-image
            from:
              - build-docker-image
      params:
        - name: path
          value: /workspace/source/lorem-ipsum-eks/lorem-ipsum/app.yaml
        - name: yamlPathToImage
          value: "spec.template.spec.containers[0].image"
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: lorem-ipsum-pipeline-run
  namespace: tekton-pipelines
spec:
  serviceAccountName: git-push-service-account
  pipelineRef:
    name: lorem-ipsum-pipeline
  resources:
    - name: source-repo
      resourceRef:
        name: lorem-ipsum-git
    - name: web-image
      resourceRef:
        name: lorem-ipsum
