apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: clean
  namespace: tekton-pipelines
spec:
  workspaces:
    - name: source
  params:
    - name: path
      type: string
      description: Path to version output file
      default: "$(workspaces.source.path)"
  steps:
    - name: clean-workspace
      image: alpine
      script: |
        #!/bin/sh
        ls $(workspaces.source.path)
        rm -rf $(workspaces.source.path)/*
        echo "after rm..."
        ls $(workspaces.source.path)
      securityContext:
        runAsUser: 0
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: app-version
  namespace: tekton-pipelines
spec:
  workspaces:
    - name: source
  params:
    - name: revision
      type: string
      description: Source code repository revision
      default: "HEAD"
    - name: url
      type: string
      description: Repo url
    - name: imageUrl
      type: string
      description: Docker registry image url
    - name: imageTagPrefix
      description: Image tag prefix
  results:
    - name: version
      description: The current version based on git commit
    - name: imageUrl
      description: Image url without tag
    - name: imageTag
      description: Image tag
  steps:
    - name: version
      image: docker.io/alpine/git:v2.26.2
      script: |
        #!/bin/sh
        WS_PATH=$(workspaces.source.path)
        echo $WS_PATH
        ls $WS_PATH
        cd $WS_PATH
        COUNT=$(git rev-list --count $(inputs.params.revision))
        VERSION="v1.0.$COUNT.$(inputs.params.imageTagPrefix)"
        TAG=$VERSION
        URL="$(inputs.params.imageUrl):$TAG"
        echo -n $VERSION > $(results.version.path)
        echo -n $TAG > $(results.imageTag.path)
        echo -n $URL > $(results.imageUrl.path)
        cat $(results.imageUrl.path); echo
        cat $(results.version.path); echo
        cat $(results.imageTag.path); echo
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pytest
  namespace: tekton-pipelines
spec:
  workspaces:
    - name: source
  params:
    - name: PYTHON
      description: The used Python version, more precisely the tag for the Python image
      type: string
      default: "latest"
    - name: ARGS
      description: The additional arguments to be used with pytest
      type: string
      default: ""
    - name: SOURCE_PATH
      description: The path to the source code
      default: "."
    - name: WORKING_DIR
      description: The path to the source code
    - name: REQUIREMENTS_FILE
      description: The name of the requirements file inside the source location
      default: "requirements.txt"
    - name: version
      type: string
      default: ""
  steps:
    - name: unit-test
      image: docker.io/python:$(inputs.params.PYTHON)
      env:
        - name: aurora_host
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: aurora_host
        - name: aurora_user
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: aurora_user
        - name: aurora_port
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: aurora_port
        - name: aurora_password
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: aurora_password
        - name: admin_user
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: admin_user
        - name: admin_password
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: admin_password
        - name: password_encryption_key
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: password_encryption_key
        - name: jwk_public_key_path
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: jwk_public_key_path
        - name: admin_token_permissions
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: admin_token_permissions
        - name: user_token_permissions
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: user_token_permissions
        - name: admin_token
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: admin_token
        - name: user_token
          valueFrom:
            secretKeyRef:
              name: lorem-ipsum-unit
              key: user_token
      workingDir: $(inputs.params.WORKING_DIR)
      volumeMounts:
        - name: jwk-certs-auth0
          mountPath: /jwk/certs
      script: |
        ls $(workspaces.source.path)
        ls $(inputs.params.WORKING_DIR)
        echo $(inputs.params.version)
        export PATH=$PATH:$HOME/.local/bin
        if [ -n "$(inputs.params.REQUIREMENTS_FILE)" ] && [ -e "$(inputs.params.REQUIREMENTS_FILE)" ];then
          pip install -r $(inputs.params.SOURCE_PATH)/$(inputs.params.REQUIREMENTS_FILE)
          pip show pytest || {
            echo "###\nWarning: Pytest is missing in your requirements\n###";
            pip install pytest
          }
        else
          pip install pytest
        fi
        python -m pytest $(inputs.params.ARGS)
  volumes:
    - name: jwk-certs-auth0
      secret:
        secretName: jwk-certs-auth0
        items:
          - key: public.pem
            path: public.pem
          - key: key.pem
            path: private.pem

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-docker-image-from-git-source
  namespace: tekton-pipelines
spec:
  workspaces:
    - name: source
  params:
    - name: pathToDockerFile
      type: string
      description: The path to the dockerfile to build
      default: /workspace/source/lorem-ipsum-eks/lorem-ipsum/Dockerfile
    - name: pathToContext
      type: string
      description: |
        The build context used by Kaniko
        (https://github.com/GoogleContainerTools/kaniko#kaniko-build-contexts)
      default: /workspace/source
    - name: imageTag
      type: string
      description: imageTag
      default: "dev"
    - name: imageUrl
      type: string
      description: image url
      default: "docker-registry.demo:5000/lorem-ipsum:dev"
  results:
    - name: IMAGE-DIGEST
      description: The current version based on git commit

  steps:
    - name: build-and-push
      image: gcr.io/kaniko-project/executor:v0.16.0
      # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(params.pathToDockerFile)
        - --destination=$(params.imageUrl)
        - --destination=$(params.imageUrl).test
        - --context=$(params.pathToContext)
        - --skip-tls-verify
        - --digest-file=/tekton/results/IMAGE-DIGEST
    - name: debugging
      image: ubuntu  # contains bash
      script: |
        #!/usr/bin/env bash
        echo $(inputs.params.imageTag)
        echo $(resources.outputs.builtImage.url)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-using-kubectl
  namespace: tekton-pipelines
spec:
  params:
    - name: path
      type: string
      description: Path to the manifest to apply
    - name: yamlPathToImage
      type: string
      description: |
        The path to the image to replace in the yaml manifest (arg to yq)
  steps:
    - name: update-yaml
      image: alpine
      command: ["sed"]
      args:
        - "-i"
        - "-e"
        - "s;lorem-ipsum:dev; kubernetes.docker.internal:5000/lorem-ipsum:dev;g"
        - "$(params.path)"
    - name: debugging
      image: ubuntu  # contains bash
      script: |
        #!/usr/bin/env bash
        ls /workspace
        ls /workspace/source
        cat /workspace/source/lorem-ipsum-eks/lorem-ipsum/app.yaml
    - name: run-kubectl
      image: lachlanevenson/k8s-kubectl
      command: ["kubectl"]
      args:
        - "apply"
        - "-f"
        - "$(params.path)"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: argocd-push
  namespace: tekton-pipelines
spec:
  workspaces:
    - name: source
  params:
    - name: path
      type: string
      description: Path to the helm chart
      default: "$(workspaces.source.path)/lorem-ipsum/values.yaml"
    - name: revision
      type: string
      description: Repo revision
      default: "main"
    - name: imageTag
      type: string
      default: "dev"
    - name: valuesFile
      type: string
      default: "lorem-ipsum/values.yaml"
  results:
    - name: output
      description: The current version based on git commit

  steps:
    - name: update-yaml
      image: mikefarah/yq
      script: |
        cd $(workspaces.source.path)
        ls $(workspaces.source.path)
        whoami
        ls -all lorem-ipsum
        cat $(inputs.params.valuesFile) | yq e '.image.tag = "$(inputs.params.imageTag)"' - | tee $(results.output.path)
        cat $(results.output.path)
    - name: git-push
      image: alpine/git:v2.26.2
      script: |
        #!/bin/sh
        set -e
        cat $(results.output.path) > $(workspaces.source.path)/$(inputs.params.valuesFile)
        ls $(workspaces.source.path)
        cd $(workspaces.source.path)
        echo $(inputs.params.path)
        cat $(inputs.params.path)
        git config --global user.email "adriandolha@yahoo.com"
        git config --global user.name "adriandolha"
        git checkout $(inputs.params.revision)
        git add -u lorem-ipsum/values.yaml
        if ! git diff-index --quiet $(inputs.params.revision); then
          git commit -m "[tekton] updating deployment"
          git push
        fi
        count=$(git rev-list --count $(inputs.params.revision))
        echo $count
