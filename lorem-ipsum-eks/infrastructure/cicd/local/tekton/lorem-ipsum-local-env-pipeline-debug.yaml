apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: lorem-ipsum-local-env-debug-argocd
  namespace: tekton-pipelines
spec:
  workspaces:
    - name: source
    - name: argocd
    - name: terraform
    - name: secrets
    - name: kube-config
  params:
    - name: image-url
      type: string
      description: Docker registry image url.
    - name: image-tag-prefix
      type: string
      description: Docker registry image tag prefix.
    - name: repo-url
      type: string
      description: The git repository URL to clone from.
    - name: branch-name
      type: string
      description: The git depth to clone.
    - name: argocd-repo-url
      type: string
      description: The git repository URL to clone from.
    - name: argocd-branch-name
      type: string
      description: The git depth to clone.
    - name: depth
      type: string
      description: The clone depth.
      default: "0"
    - name: namespace
      type: string
      description: The kube namespace.
      default: ""
    - name: tf-path
      type: string
      description: The kube namespace.
      default: "Path for terraform files"
  tasks:
    - name: sync-application
      taskRef:
        name: argocd-task-sync-and-wait
      params:
        - name: application-name
          value: lorem-ipsum
        - name: argocd-version
          value: v1.4.0

---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: lorem-ipsum-local-env-debug-argocd
  namespace: tekton-pipelines
spec:
  serviceAccountName: git-push-service-account
  pipelineRef:
    name: lorem-ipsum-local-env-debug-argocd
  params:
    - name: repo-url
      value: git@github.com:adriandolha/cloud-demo.git
    - name: branch-name
      value: master
    - name: argocd-repo-url
      value: git@github.com:adriandolha/lorem-ipsum-argocd.git
    - name: argocd-branch-name
      value: main
    - name: image-url
      value: "docker-registry.internal:31111/lorem-ipsum"
    - name: image-tag-prefix
      value: "dev"
    - name: namespace
      value: "dev-lorem-ipsum"
    - name: tf-path
      value: $(workspaces.source.path)/lorem-ipsum-eks/infrastructure/local

  workspaces:
    - name: source
      persistentVolumeClaim:
        claimName: lorem-ipsum-local-ws
      subPath: source
    - name: argocd
      persistentVolumeClaim:
        claimName: lorem-ipsum-local-ws
      subPath: argocd
    - name: terraform
      persistentVolumeClaim:
        claimName: lorem-ipsum-local-ws
      subPath: terraform
    - name: secrets
      persistentVolumeClaim:
        claimName: lorem-ipsum-local-ws
    - name: kube-config
      secret:
        secretName: kubeconfig
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: image-promote
  namespace: tekton-pipelines
spec:
  params:
    - name: source-image
      type: string
    - name: target-image
      type: string
  steps:
    - name: promote
      image: docker.io/library/docker:stable@sha256:18ff92d3d31725b53fa6633d60bed323effb6d5d4588be7b547078d384e0d4bf #tag: stable
      env:
      # Connect to the sidecar over TCP, with TLS.
      - name: DOCKER_HOST
        value: tcp://localhost:2376
      script: |
        docker tag $(inputs.params.source-image) $(inputs.params.target-image)

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: lorem-ipsum-local-env-debug-promote
  namespace: tekton-pipelines
spec:
  workspaces:
    - name: source
    - name: argocd
    - name: terraform
    - name: secrets
    - name: kube-config
  params:
    - name: run-full
    - name: source-image
    - name: target-image
    - name: repo-url
    - name: revision
    - name: depth

  tasks:
    - name: clean-source
      when:
        - input: "$(params.run-full)"
          operator: in
          values: [ "yes" ]
      taskRef:
        name: clean
      workspaces:
        - name: source
          workspace: source
    - name: fetch-source-repo
      taskRef:
        name: git-clone
      runAfter:
        - clean-source
      workspaces:
        - name: output
          workspace: source
      params:
        - name: url
          value: $(params.repo-url)
        - name: revision
          value: $(params.revision)
        - name: depth
          value: $(params.depth)

    - name: build-and-push
      when:
        - input: "$(params.run-full)"
          operator: in
          values: [ "yes" ]
      taskRef:
        name: buildah
      runAfter:
        - fetch-source-repo
      params:
        - name: IMAGE
          value: $(params.source-image)
        - name: CONTEXT
          value: $(workspaces.source.path)/lorem-ipsum-eks/lorem-ipsum
        - name: DOCKERFILE
          value: $(workspaces.source.path)/lorem-ipsum-eks/lorem-ipsum/Dockerfile
        - name: TLSVERIFY
          value: "false"
        - name: FORMAT
          value: "oci"
      workspaces:
        - name: source
          workspace: source

    - name: promote
      taskRef:
        name: docker-tag
#      runAfter:
#        - build-and-push
      workspaces:
        - name: source
          workspace: source
      params:
        - name: source-image
          value: $(params.source-image)
        - name: target-image
          value: $(params.target-image)
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: lorem-ipsum-local-env-debug-promote
  namespace: tekton-pipelines
spec:
  serviceAccountName: git-push-service-account
  pipelineRef:
    name: lorem-ipsum-local-env-debug-promote
  params:
    - name: run-full
      value: "no"
    - name: source-image
      value: docker-registry.demo:5000/lorem-ipsum:v1.0.175.dev
    - name: target-image
      value: docker-registry.demo:5000/lorem-ipsum:v1.0.175.test
    - name: repo-url
      value: git@github.com:adriandolha/cloud-demo.git
    - name: revision
      value: master
    - name: depth
      value: "0"

  workspaces:
    - name: source
      persistentVolumeClaim:
        claimName: lorem-ipsum-local-ws
      subPath: source
    - name: argocd
      persistentVolumeClaim:
        claimName: lorem-ipsum-local-ws
      subPath: argocd
    - name: terraform
      persistentVolumeClaim:
        claimName: lorem-ipsum-local-ws
      subPath: terraform
    - name: secrets
      persistentVolumeClaim:
        claimName: lorem-ipsum-local-env-ws
    - name: kube-config
      secret:
        secretName: kubeconfig