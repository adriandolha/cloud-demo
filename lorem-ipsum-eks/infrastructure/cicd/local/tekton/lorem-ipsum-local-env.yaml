apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: tf-destroy
  namespace: tekton-pipelines
spec:
  workspaces:
    - name: source
    - name: terraform
    - name: secrets
    - name: kube-config
      mountPath: /secrets/.kube
  params:
    - name: path
      type: string
      description: Path to tf files
      default: ""
    - name: namespace
      type: string
      description: Kubernetes namespace
      default: ""
  steps:
    - name: prepare
      image: alpine
      script: |
        #!/bin/sh
        ls $(inputs.params.path)
        ls $(workspaces.source.path)
        echo $(workspaces.terraform.path)
        echo $(workspaces.secrets.path)
        echo $(workspaces.kube-config.path)
        cat $(workspaces.kube-config.path)/config
        ls $(workspaces.terraform.path)
        ls $(workspaces.kube-config.path)
    - name: init
      image: docker.io/hashicorp/terraform:light
      workingDir: $(inputs.params.path)
      command: [ "terraform" ]
      args:
        - init
        - -reconfigure
        - -backend-config=$(inputs.params.namespace).tfbackend
    - name: destroy
      image: docker.io/hashicorp/terraform:light
      workingDir: $(inputs.params.path)
      command: [ "terraform" ]
      args:
        - destroy
        - -auto-approve
        - -var-file=$(inputs.params.namespace).tfvars
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: tf-apply
  namespace: tekton-pipelines
spec:
  workspaces:
    - name: source
    - name: terraform
    - name: secrets
    - name: kube-config
      mountPath: /secrets/.kube
  params:
    - name: path
      type: string
      description: Path to tf files
      default: ""
    - name: namespace
      type: string
      description: Kubernetes namespace
      default: ""
  steps:
    - name: prepare
      image: alpine
      env:
        - name: AWS_DEFAULT_REGION
          valueFrom:
            secretKeyRef:
              name: aws-config
              key: REGION
        - name: AWS_ACCOUNT_ID
          valueFrom:
            secretKeyRef:
              name: aws-config
              key: ACCOUNT_ID
        - name: AWS_BACKEND_KEY
          value: "lorem-ipsum/$(inputs.params.namespace)/platform"
      script: |
        #!/bin/sh
        ls $(inputs.params.path)
        cat $(inputs.params.path)/main.tf
        cat $(inputs.params.path)/$(inputs.params.namespace).tfbackend
        envsubst $(inputs.params.path)/$(inputs.params.namespace).tfbackend
        echo $(workspaces.source.path)
        cat $(inputs.params.path)/$(inputs.params.namespace).tfbackend
        echo $(workspaces.terraform.path)
        echo $(workspaces.secrets.path)
        echo $(workspaces.kube-config.path)
        ls $(workspaces.terraform.path)
        ls $(workspaces.kube-config.path)
    - name: init
      image: docker.io/hashicorp/terraform:light
      env:
        - name: TF_LOG
          value: "TRACE"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: AWS_SECRET_ACCESS_KEY
        - name: AWS_DEFAULT_REGION
          valueFrom:
            secretKeyRef:
              name: aws-config
              key: REGION

        - name: AWS_ACCOUNT_ID
          valueFrom:
            secretKeyRef:
              name: aws-config
              key: ACCOUNT_ID
      workingDir: $(inputs.params.path)
      command: [ "terraform" ]
      args:
        - init
        - -reconfigure
        - -backend-config=$(inputs.params.namespace).tfbackend
    - name: apply
      image: docker.io/hashicorp/terraform:light
      workingDir: $(inputs.params.path)
      command: [ "terraform" ]
      args:
        - apply
        - -auto-approve
        - -var-file=$(inputs.params.namespace).tfvars